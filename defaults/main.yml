---

certbot__install_from_repo: true

# not yet implemented
# certbot__install_from_src: no

certbot__bin: "{{ '/usr/bin/certbot' if certbot__install_from_repo else '/opt/certbot-auto' }}"

# run in testing/staging env only ... will result in invalid certs
certbot__testing: false

certbot__email: test@nosuchdomain.xyz

# use --http-01-port instead of webroot
# in this case, webroot must be a interger desscribing the http port to listen
certbot__use_http: false

# if we use http-01-port. the address to listen to # http-01-address
certbot__http_address: 127.0.0.1

# map of cert name => map webroot => lsit of names
# for each maincertname a cert will be generated using the webroot map => domainname as names
# certbot__certs:
#  dom1.tld1:
#    /srv/www/dom1:
#      - dom1.tld1
#      - a.dom1.tld1
#      - b.dom1.tld1
#      - a.dom2.tld2
#    /srv/www/dom3
#      - dom3.tld3
#  dom2.tld2:
#    /srv/www/dom2
#      - dom2.tld2

certbot__testing_args:
  - "--staging"

certbot__args:
  - "--non-interactive"
  - "--quiet"
  - "--expand"
  - "--agree-tos"
  - "--email {{ certbot__email }}"
  - "{{ certbot__testing_args | join(' ') if certbot__testing else '' }}"
  - "--renew-with-new-domains"


certbot__scriptdir: /var/tmp/certbot-scripts

# optional pre/post/deploy hooks
# example:
# certbot__hooks:
#   deploy: "{{ certbot__scriptdir }}/certbot4haproxy.sh
certbot__hooks: {}

# additional scripts to copy into certbot__scriptdir
# maybe required for the hooks
certbot__scripts: []

# set this to 1 in order to force re-creation of the certs
certbot__forcerun: 0

# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2 smartindent nu
